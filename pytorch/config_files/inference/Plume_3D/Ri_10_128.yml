# Configuration file for buoyant simulation.
# The program overwrites parameters from conf and mconf dicts found
# in <modelDir> (where the trained model is) with parameters found here.
# They just impact the physics of the problem but leave the architecture
# untouched.
# This table is saved to disk, in <outputFolder>, at every iteration and
# is loaded when restarting a sim.
# To restart precise <outputFolder> and set restartSim to true.

# res : Resolution of domain
resX: 128
resY: 128
resZ: 128
# restartSim : set to true to restart form checkpoint from outputFolder.
restartSim: false
# realTimePlot : set to true to plot results during simulation.
realTimePlot: false
# saveVTK : set to true to save results as structured VTK files
# use Paraview to load those files.
saveVTK: false
# outputFolder : folder for storing results, checkpoints and config files
outputFolder: "/path/to/fluidnet/fluidnet_cxx_2/results_3d/Plume_3D/Ri_10_0/Unet_3D"
# simMethod: choose convnet or jacobi
simMethod: "convnet"
# modelDir : location of trained model
modelDir: "/path/to/fluidnet/fluidnet_cxx_2/trained_models/RF/UNet_5_RF_128_p_100"
# List containing networks to study
study_nets: [UNet_4_RF_128_p_100, UNet_5_RF_128_p_100, Jacobi]
# modelFilename : name of trained model
modelFilename: "convModel"
# dt : simualation timestep
dt: 2.0
# statIter : iterations frequency for output
statIter: 5
# maxIter : maximum number of simulation iterations
maxIter: 300
# maccormackStrength : used in semi-lagrangian MacCormack advection
# when LT div is activated. 0.6 is a good value. If ~1, can lead to
# high frequency artifacts.
maccormackStrength: 0.6
# buoyancyScale : Buoyancy forces scale
# gravityScale : Gravity forces scale
# Note: Manta and FluidNet divide gravity forces into "gravity" and "buoyancy"
# They represent the two terms arising from Boussinesq approximation
# rho*g = rho_0*g + delta_rho*g
#           (1)         (2)
# rho_0 being the average density and delta_rho local difference of density
# w.r.t average density.
# Mantaflow calls (1) gravity and (2) buoyancy and allows for different g's
buoyancyScale: !!python / float 0.53879  # 0.5388
gravityScale: 0
# Introduces a correcting factor in the denisty equation
# from "A splitting method for incompressible flows with variable
# density based on a pressure Poisson equation" (Guermond, Salgado).
# Not really tested... Recommendation is to leave it as false.
correctScalar: false
# viscosity : introduces a viscous term in moment equation.
# Algortihm taken from the book "Fluid Simulation for Computer Graphics" by
# Bridson
viscosity: 0.00
# operatingDensity : When applying buoyancy, buoyancyScale is multiplied
# by (density(i,j) - operatingDensity)
operatingDensity: 0.0
# pTol : convergence criterion for Jacobi method
pTol: 0.000  # 1
# jacobiIter : maximum number of iterations for Jacobi method
jacobiIter: 400
# gravityVec : orientation of the gravity vector when buoyancy/gravity
# are present.
gravityVec:
    x: 0.0
    y: -1.0
    z: 0.0
# injectionDensity : density at buoyant plume inlet
injectionDensity: 0.01
# sourceRadius : radius of inlet zone w.r.t the center of x-axis
sourceRadius: 0.145
# injectionVelocity : inlet velocity
injectionVelocity: 0.1
# Plume Center and radius
centerX: 32
centerY: 32
centerZ: 32
radius: 10
# If True we will update the divergency outside the Box!
outside_Ja: False
# Threshold for the Jacobi its
threshold_Div: 5.e-4
